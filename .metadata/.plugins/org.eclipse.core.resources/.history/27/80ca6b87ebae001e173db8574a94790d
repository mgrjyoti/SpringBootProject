package com.jspiders.student.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jspiders.student.entity.Student;
import com.jspiders.student.responce.StudentResponse;
import com.jspiders.student.service.StudentService;

@RestController
public class StudentController {

	@Autowired
	private StudentService studentService;
	
	@PostMapping(path = "/student")
	public ResponseEntity<StudentResponse> addStudent(@RequestBody Student student) {
		
		Student student2= studentService.addStudent(student);
		
		StudentResponse studentResponse= new StudentResponse();
		studentResponse.setMessage("Student Added sucessfully...");
		studentResponse.setStatus(HttpStatus.CREATED.value());
		studentResponse.setStudent(student2);
		studentResponse.setStudents(null);
		return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.CREATED);
	}
	
	@GetMapping(path = "/students")
	public ResponseEntity<StudentResponse> getAllStudent() {
		List<Student> student= studentService.getAllStudents();
		if (student != null) {
			StudentResponse studentResponse= new StudentResponse();
			studentResponse.setMessage("Student Fetched Successfully...");
			studentResponse.setStatus(HttpStatus.FOUND.value());
			studentResponse.setStudent(null);
			studentResponse.setStudents(student);
			return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.FOUND);
		}
		else {
			StudentResponse studentResponse= new StudentResponse();
			studentResponse.setMessage("Student not Fetched Successfully...");
			studentResponse.setStatus(HttpStatus.NOT_FOUND.value());
			studentResponse.setStudent(null);
			studentResponse.setStudents(student);
			return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.NOT_FOUND);
		}	
	}
	
	@GetMapping(path = "/student/{id}")
	public ResponseEntity<StudentResponse> findStudenById(@PathVariable long id) {
		Student student = studentService.findStudentById(id);
		if (student != null) {
			StudentResponse studentResponse= new StudentResponse();
			studentResponse.setMessage("Student Fetched Successfully...");
			studentResponse.setStatus(HttpStatus.FOUND.value());
			studentResponse.setStudent(student);
			studentResponse.setStudents(null);
			return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.FOUND);
		}
		else {
			StudentResponse studentResponse= new StudentResponse();
			studentResponse.setMessage("Student not Fetched Successfully...");
			studentResponse.setStatus(HttpStatus.NOT_FOUND.value());
			studentResponse.setStudents(null);
			studentResponse.setStudent(student);
			return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.NOT_FOUND);
		}	
	}
	
	@DeleteMapping(path = "student/{id}")
	public ResponseEntity<StudentResponse> deleteStudentById(@PathVariable long id) {
	    Optional<Student> studentOptional = studentService.deleteStudentById(id);

	    if (studentOptional.isPresent()) {
	        Student student = studentOptional.get();
	        StudentResponse studentResponse = new StudentResponse();
	        studentResponse.setMessage("Student deleted Successfully...");
	        studentResponse.setStatus(HttpStatus.OK.value());
	        studentResponse.setStudent(student);
	        studentResponse.setStudents(null);
	        return new ResponseEntity<>(studentResponse, HttpStatus.OK);
	    } else {
	        StudentResponse studentResponse = new StudentResponse();
	        studentResponse.setMessage("Student not found...");
	        studentResponse.setStatus(HttpStatus.NOT_FOUND.value());
	        studentResponse.setStudents(null);
	        studentResponse.setStudent(null);
	        return new ResponseEntity<>(studentResponse, HttpStatus.NOT_FOUND);
	    }
	}


User
@DeleteMapping(path = "student/{id}")
	public ResponseEntity<StudentResponse> deleteStudentById(@PathVariable long id) {
		Student student= studentService.deleteStudentById(id);
		if (student != null) {
			StudentResponse studentResponse= new StudentResponse();
			studentResponse.setMessage("Student deleted Successfully...");
			studentResponse.setStatus(HttpStatus.OK.value());
			studentResponse.setStudent(student);
			studentResponse.setStudents(null);
			return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.OK);
		}
		else {
			StudentResponse studentResponse= new StudentResponse();
			studentResponse.setMessage("Student not Fetched Successfully...");
			studentResponse.setStatus(HttpStatus.NOT_FOUND.value());
			studentResponse.setStudents(null);
			studentResponse.setStudent(null);
			return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.NOT_FOUND);
		}	
	}

	public Optional<Student> deleteStudentById(long id) {
		Optional<Student> student= Optional.empty();
		if (student.isPresent()) {
			studentRepository.deleteById(id);;
		}
		else {
			return student;
		}
		return student;
	}
ChatGPT
It looks like you have a Spring Boot application with a @DeleteMapping endpoint for deleting a student by ID. However, there are a couple of issues in your code:

The deleteStudentById method in your service always returns an empty Optional<Student> since it's initialized as such. Therefore, the condition if (student.isPresent()) will never be true, and the deletion will not occur.

You are returning Optional<Student> from the service method, but in the controller, you are checking if (student != null). You should check if the Optional is present using if (student.isPresent()) instead.

Here's an updated version of your code:

java
Copy code
@DeleteMapping(path = "student/{id}")
public ResponseEntity<StudentResponse> deleteStudentById(@PathVariable long id) {
    Optional<Student> studentOptional = studentService.deleteStudentById(id);

    if (studentOptional.isPresent()) {
        Student student = studentOptional.get();
        StudentResponse studentResponse = new StudentResponse();
        studentResponse.setMessage("Student deleted Successfully...");
        studentResponse.setStatus(HttpStatus.OK.value());
        studentResponse.setStudent(student);
        studentResponse.setStudents(null);
        return new ResponseEntity<>(studentResponse, HttpStatus.OK);
    } else {
        StudentResponse studentResponse = new StudentResponse();
        studentResponse.setMessage("Student not found...");
        studentResponse.setStatus(HttpStatus.NOT_FOUND.value());
        studentResponse.setStudents(null);
        studentResponse.setStudent(null);
        return new ResponseEntity<>(studentResponse, HttpStatus.NOT_FOUND);
    }
}

public Optional<Student> deleteStudentById(long id) {
    Optional<Student> studentOptional = studentRepository.findById(id);

    if (studentOptional.isPresent()) {
        studentRepository.deleteById(id);
    }

    return studentOptional;
}
This code checks if the Optional<Student> returned from the service contains a student before attempting to delete it. Additionally, the Optional<Student> is obtained from the repository using findById(id).

User
@PutMapping(path = "/student")
	public ResponseEntity<StudentResponse> updateStudent(@RequestBody Student student) {
	 Student student2=studentService.updateStudent(student);
	 
	 StudentResponse studentResponse= new StudentResponse();
	 studentResponse.setMessage("Student UPdated Sucessfully...");
	 studentResponse.setStatus(HttpStatus.OK.value());
	 studentResponse.setStudent(student2);
	 studentResponse.setStudents(null);
	 return new ResponseEntity<StudentResponse>(studentResponse, HttpStatus.OK);
	}

public Student updateStudent(Student student) {
		return studentRepository.save(student);	
	}

ChatGPT
Your @PutMapping endpoint for updating a student looks generally fine, but there's one improvement you can make in terms of handling the case when the provided student to update doesn't exist. In your current code, if the provided student doesn't exist, the updateStudent method will still save it as a new entity, which might not be the desired behavior.

Here's a modified version of your code that checks if the student exists before updating it:

java
Copy code
@PutMapping(path = "/student")
public ResponseEntity<StudentResponse> updateStudent(@RequestBody Student student) {
    Student updatedStudent = studentService.updateStudent(student);

    if (updatedStudent != null) {
        StudentResponse studentResponse = new StudentResponse();
        studentResponse.setMessage("Student updated successfully...");
        studentResponse.setStatus(HttpStatus.OK.value());
        studentResponse.setStudent(updatedStudent);
        studentResponse.setStudents(null);
        return new ResponseEntity<>(studentResponse, HttpStatus.OK);
    } else {
        StudentResponse studentResponse = new StudentResponse();
        studentResponse.setMessage("Student not found...");
        studentResponse.setStatus(HttpStatus.NOT_FOUND.value());
        studentResponse.setStudents(null);
        studentResponse.setStudent(null);
        return new ResponseEntity<>(studentResponse, HttpStatus.NOT_FOUND);
    }
}	
	@GetMapping(path = "/student")
	public ResponseEntity<StudentResponse> findByContact(@RequestParam long contact) {
		Student student =studentService.findByContact(contact);
		if (student != null) {
			StudentResponse studentResponse= new StudentResponse();
			studentResponse.setMessage("Student Found Successfully...");
			studentResponse.setStatus(HttpStatus.OK.value());
			studentResponse.setStudent(student);
			studentResponse.setStudents(null);
			return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.OK);
		}
		else {
			StudentResponse studentResponse= new StudentResponse();
			studentResponse.setMessage("Student not Found");
			studentResponse.setStatus(HttpStatus.NOT_FOUND.value());
			studentResponse.setStudents(null);
			studentResponse.setStudent(null);
			return new ResponseEntity<StudentResponse>(studentResponse,HttpStatus.NOT_FOUND);
		}	

		
		
	}
}
